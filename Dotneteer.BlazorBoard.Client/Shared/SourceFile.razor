@using System.IO

@inject IJSRuntime JSRuntime
@inject IThemingService<ThemeProps> ThemingService
@inject HttpClient HttpClient
@inject IUriHelper UriHelper
@inherits StateAwareComponentBase

<div class="source-file-component" id="@EditorModel.Id">
</div>

@code {

    static Dictionary<string, string> s_SourceCache = new Dictionary<string, string>();

    [Parameter]
    public string DemoId { get; set; }

    [Parameter]
    public string ScenarioId { get; set; }

    [Parameter]
    public string SourceFileName { get; set; }

    bool _alreadyRendered = false;
    EditorModel EditorModel;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        ThemingService.ThemeChanged += OnThemeChanged;
        EditorModel = new EditorModel
        {
            Script = "// No content",
            Language = "csharp",
            FontSize = State.SelectedFontSize.Id
        };
    }
    
    protected override async void OnAfterRender()
    {
        if (!_alreadyRendered)
        {
            Console.WriteLine("Rendering SourceFile...");
            var ext = Path.GetExtension(State.SelectedSourceFileName).ToLower();
            var filePath = $"{UriHelper.GetBaseUri()}demos/{DemoId}/{ScenarioId}/{SourceFileName}.txt";
            if (!s_SourceCache.TryGetValue(filePath, out var bodyText))
            {
                bodyText = $"// Cannot read {filePath}";
                var response = await HttpClient.GetAsync(filePath);
                if (response.IsSuccessStatusCode)
                {
                    bodyText = await response.Content.ReadAsStringAsync();
                }
                s_SourceCache[filePath] = bodyText;
            }
            var type = "razor";
            switch (ext)
            {
                case ".cs":
                    type = "csharp";
                    break;
                case ".js":
                    type = "javascript";
                    break;
                case ".ts":
                    type = "typescript";
                    break;
                case ".htm":
                case ".html":
                    type = "html";
                    break;
                case ".css":
                    type = "css";
                    break;
                case ".scss":
                case ".sass":
                    type = "scss";
                    break;
            }
            EditorModel.Script = bodyText;
            EditorModel.Language = type;

            await JSRuntime.InvokeAsync<object>("BlazorBoardExtensions.editorInitialize", EditorModel);
            await JSRuntime.InvokeAsync<object>("BlazorBoardExtensions.setTheme",
                ThemingService.GetProperty(p => p.EditorTheme));
            _alreadyRendered = true;
        }
    }

    public async void OnThemeChanged(object sender, EventArgs e)
    {
        await JSRuntime.InvokeAsync<object>("BlazorBoardExtensions.setTheme",
            ThemingService.GetProperty(p => p.EditorTheme));
    }

    protected override void OnSelectedFontSizeChanged(ComboDataItem selectedFontSize)
    {
        Console.WriteLine($"Font size changed: {selectedFontSize.Id}");
        EditorModel.FontSize = selectedFontSize.Id;
        _alreadyRendered = false;
        StateHasChanged();
    }

    public override void Dispose()
    {
        base.Dispose();
        ThemingService.ThemeChanged -= OnThemeChanged;
    }
}
